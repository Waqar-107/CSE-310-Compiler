line no. 2: type_specifier : INT 
int

line no. 2: type_specifier : INT 
int

line no. 2: parameter_list : type_specifier ID
int a

line no. 2: type_specifier : INT 
int

line no. 2: parameter_list : parameter_list COMMA type_specifier ID
int a,int b

################################
# ScopeTable with ID 2 Created #
################################

line no. 3: variable : ID
a

line no. 3: factor : variable
a

line no. 3: unary_expression : factor
a

line no. 3: term : unary_expression
a

line no. 3: simple_expression : term
a

line no. 3: variable : ID
b

line no. 3: factor : variable
b

line no. 3: unary_expression : factor
b

line no. 3: term : unary_expression
b

line no. 3: simple_expression : simple_expression ADDOP term
a+b

line no. 3: rel_expression : simple_expression
a+b

line no. 3: logic_expression : rel_expression
a+b

line no. 3: expression : logic_expression
a+b

line no. 3: statement : RETURN expression SEMICOLON
return a+b;

line no. 3: statements : statement
return a+b;

line no. 4: compound_statement : LCURL statements RCURL
{
return a+b;
}

line no. 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
int var(int a,int b){return a+b;
}


	------------------------------
	ScopeTable #2
	1  --> <a, ID> 
	2  --> <b, ID> 
	------------------------------
------------------------------------------------------------
	------------------------------
	ScopeTable #1
	4  --> <var, ID> 
	------------------------------
------------------------------------------------------------
################################
# ScopeTable with ID 2 Removed #
################################

line no. 4: unit : func_declaration
int var(int a,int b){return a+b;
}


line no. 4: program : unit
int var(int a,int b){return a+b;
}


line no. 6: type_specifier : INT 
int

################################
# ScopeTable with ID 3 Created #
################################

line no. 8: type_specifier : INT 
int

line no. 8: declaration_list : ID LTHIRD CONST_INT RTHIRD
a[2]

line no. 8: declaration_list : declaration_list COMMA ID
a[2],c

line no. 8: declaration_list : declaration_list COMMA ID
a[2],c,i

line no. 8: declaration_list : declaration_list COMMA ID
a[2],c,i,j

line no. 8: var_declaration : type_specifier declaration_list SEMICOLON
int a[2],c,i,j;

line no. 8: statement : var_declaration
int a[2],c,i,j;

line no. 8: statements : statement
int a[2],c,i,j;

line no. 8: type_specifier : FLOAT
float

line no. 8: declaration_list : ID
d

line no. 8: var_declaration : type_specifier declaration_list SEMICOLON
float d;

line no. 8: statement : var_declaration
float d;

line no. 8: statements : statements statement
int a[2],c,i,j;
float d;

line no. 10: factor : CONST_INT
5

line no. 10: unary_expression : factor
5

line no. 10: term : unary_expression
5

line no. 10: simple_expression : term
5

line no. 10: factor : CONST_INT
2

line no. 10: unary_expression : factor
2

line no. 10: term : unary_expression
2

line no. 10: factor : CONST_INT
6

line no. 10: unary_expression : factor
6

line no. 10: term : term MULOP unary_expression
2*6

line no. 10: simple_expression : term
2*6

line no. 10: rel_expression : simple_expression RELOP simple_expression
5<2*6

line no. 10: logic_expression : rel_expression
5<2*6

line no. 10: expression : logic_expression
5<2*6

line no. 10: variable : ID
c

line no. 10: factor : CONST_INT
8

line no. 10: unary_expression : factor
8

line no. 10: term : unary_expression
8

line no. 10: simple_expression : term
8

line no. 10: rel_expression : simple_expression
8

line no. 10: logic_expression : rel_expression
8

line no. 10: expression : variable ASSIGNOP logic_expression
c=8

line no. 10: expression_statement : expression SEMICOLON
c=8;

line no. 10: statement : expression_statement
c=8;

line no. 10: statements : statement
c=8;

line no. 10: compound_statement : LCURL statements RCURL
{
c=8;
}

line no. 10: statement : compound_statement
{c=8;
}


line no. 10: variable : ID
c

line no. 10: factor : CONST_INT
5

line no. 10: unary_expression : factor
5

line no. 10: term : unary_expression
5

line no. 10: simple_expression : term
5

line no. 10: rel_expression : simple_expression
5

line no. 10: logic_expression : rel_expression
5

line no. 10: expression : variable ASSIGNOP logic_expression
c=5

line no. 10: expression_statement : expression SEMICOLON
c=5;

line no. 10: statement : expression_statement
c=5;

line no. 10: statements : statement
c=5;

line no. 10: compound_statement : LCURL statements RCURL
{
c=5;
}

line no. 10: statement : compound_statement
{c=5;
}


line no. 10: statement : IF LPAREN expression RPAREN statement ELSE statement

if(5<2*6){c=8;
}
else{c=5;
}


line no. 10: statements : statements statement
int a[2],c,i,j;
float d;
if(5<2*6){c=8;
}
else{c=5;
}


line no. 13: factor : CONST_INT
0

line no. 13: unary_expression : factor
0

line no. 13: term : unary_expression
0

line no. 13: simple_expression : term
0

line no. 13: rel_expression : simple_expression
0

line no. 13: logic_expression : rel_expression
0

line no. 13: expression : logic_expression
0

line no. 13: statement : RETURN expression SEMICOLON
return 0;

line no. 13: statements : statements statement
int a[2],c,i,j;
float d;
if(5<2*6){c=8;
}
else{c=5;
}

return 0;

line no. 14: compound_statement : LCURL statements RCURL
{
int a[2],c,i,j;
float d;
if(5<2*6){c=8;
}
else{c=5;
}

return 0;
}

line no. 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement
int main(){int a[2],c,i,j;
float d;
if(5<2*6){c=8;
}
else{c=5;
}

return 0;
}


	------------------------------
	ScopeTable #3
	0  --> <j, ID> 
	1  --> <a, ID> 
	3  --> <c, ID> 
	4  --> <d, ID> 
	9  --> <i, ID> 
	------------------------------
------------------------------------------------------------
	------------------------------
	ScopeTable #1
	4  --> <main, ID> <var, ID> 
	------------------------------
------------------------------------------------------------
################################
# ScopeTable with ID 3 Removed #
################################

line no. 14: unit : func_declaration
int main(){int a[2],c,i,j;
float d;
if(5<2*6){c=8;
}
else{c=5;
}

return 0;
}


line no. 14: program : program unit
int var(int a,int b){return a+b;
}

int main(){int a[2],c,i,j;
float d;
if(5<2*6){c=8;
}
else{c=5;
}

return 0;
}


line no. 15: start : program
int var(int a,int b){return a+b;
}

int main(){int a[2],c,i,j;
float d;
if(5<2*6){c=8;
}
else{c=5;
}

return 0;
}


------------------------------------------------------------
	------------------------------
	ScopeTable #1
	4  --> <main, ID> <var, ID> 
	------------------------------
------------------------------------------------------------
total lines read: 14
total errors encountered: 0