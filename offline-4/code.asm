.MODEL SMALL
.STACK 100H
.DATA
	a2 DW ?
	b2 DW ?
	i2 DW ?
.CODE
PRINT_ID PROC

	;SAVE IN STACK
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	;CHECK IF NEGATIVE
	OR AX, AX
	JGE PRINT_NUMBER

	;PRINT MINUS SIGN
	PUSH AX
	MOV AH, 2
	MOV DL, '-'
	INT 21H
	POP AX

	NEG AX

	PRINT_NUMBER:
	XOR CX, CX
	MOV BX, 10D

	REPEAT_CALC:

		;AX:DX- QUOTIENT:REMAINDER
		XOR DX, DX
		DIV BX  ;DIVIDE BY 10
		PUSH DX ;PUSH THE REMAINDER IN STACK

		INC CX

		OR AX, AX
		JNZ REPEAT_CALC

	MOV AH, 2

	PRINT_LOOP:
		POP DX
		ADD DL, 30H
		INT 21H
		LOOP PRINT_LOOP

	;NEWLINE
	MOV AH, 2
	MOV DL, 0AH
	INT 21H
	MOV DL, 0DH
	INT 21H

	POP AX
	POP BX
	POP CX
	POP DX

	RET
PRINT_ID ENDP

MAIN PROC

	;INITIALIZE DATA SEGMENT
	MOV AX, @DATA
	MOV DS, AX


	MOV AX, 3
	MOV b2, AX

	MOV AX, 0
	MOV a2, AX
L1:
	MOV AX, b2
	CMP AX, 0
	JE L2
	MOV AX, b2
	DEC AX
	MOV b2, AX
	MOV AX, a2
	INC AX
	MOV a2, AX
	JMP L1
	L2:

	MOV AX, a2
	CALL PRINT_ID

	MOV AX, b2
	CALL PRINT_ID

	MOV AX, 4CH
	INT 21H
MAIN ENDP

END MAIN