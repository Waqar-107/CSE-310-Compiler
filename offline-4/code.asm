.MODEL SMALL
.STACK 100H
.DATA
	a2 DW ?
	T1 DW ?
	a3 DW ?
	b3 DW ?
	x3 DW ?
	T2 DW ?
	T3 DW ?
	a4 DW ?
	b4 DW ?
.CODE
PRINT_ID PROC

	;SAVE IN STACK
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	;CHECK IF NEGATIVE
	OR AX, AX
	JGE PRINT_NUMBER

	;PRINT MINUS SIGN
	PUSH AX
	MOV AH, 2
	MOV DL, '-'
	INT 21H
	POP AX

	NEG AX

	PRINT_NUMBER:
	XOR CX, CX
	MOV BX, 10D

	REPEAT_CALC:

		;AX:DX- QUOTIENT:REMAINDER
		XOR DX, DX
		DIV BX  ;DIVIDE BY 10
		PUSH DX ;PUSH THE REMAINDER IN STACK

		INC CX

		OR AX, AX
		JNZ REPEAT_CALC

	MOV AH, 2

	PRINT_LOOP:
		POP DX
		ADD DL, 30H
		INT 21H
		LOOP PRINT_LOOP

	;NEWLINE
	MOV AH, 2
	MOV DL, 0AH
	INT 21H
	MOV DL, 0DH
	INT 21H

	POP AX
	POP BX
	POP CX
	POP DX

	RET
PRINT_ID ENDP

f PROC

	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV AX, 9
	MOV a2, AX
	POP AX
	POP BX
	POP CX
	POP DX
RET
f ENDP

g PROC

	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV AX, a3
	MOV a2, AX
	CALL f

	MOV AX, 
	ADD AX, a3
	MOV T2, AX

	MOV AX, T2
	ADD AX, b3
	MOV T3, AX

	MOV AX, T3
	MOV x3, AX
	POP AX
	POP BX
	POP CX
	POP DX
RET
g ENDP

MAIN PROC

	;INITIALIZE DATA SEGMENT
	MOV AX, @DATA
	MOV DS, AX


	MOV AX, 1
	MOV a4, AX

	MOV AX, 2
	MOV b4, AX

	MOV AX, a4
	MOV a3, AX

	MOV AX, b4
	MOV b3, AX
	CALL g

	MOV AX, 
	MOV b4, AX

	MOV AX, a4
	CALL PRINT_ID

	MOV AX, 4CH
	INT 21H
MAIN ENDP

END MAIN